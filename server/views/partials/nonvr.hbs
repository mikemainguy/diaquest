<div id="roomparent">
    <div id="room"></div>
</div>
<div class="nonvr nonvrclosed">

    <button id="hideNonVR">Hide Menu</button>
    <button id="showNonVR">Show Menu</button>
    <div>
        <button id="joinButton">Join Call</button>
        <button id="startScreenShareButton">Screen Share</button>

        <button id="leaveButton"></button>
        <button id="muteButton"></button>
        <button id="unmuteButton"></button>
        <button id="homeButton">Go Home</button>
    </div>
    <div>
        <form id="media" action="/api/media/create">
            <label for="fileupload">Upload Media</label>
            <input id="fileupload" type="file" name="fileupload"/>
            <input id="preview" type="hidden" name="preview" value="false"/>
            <button id="uploadButton" type="submit">Upload File</button>
        </form>
    </div>

    <div id="mediaselect">

    </div>

</div>

<script>
    function dataURLtoBlob(dataURL) {
        let array, binary, i, len;
        binary = atob(dataURL.split(',')[1]);
        array = [];
        i = 0;
        len = binary.length;
        while (i < len) {
            array.push(binary.charCodeAt(i));
            i++;
        }
        return new Blob([new Uint8Array(array)], {
            type: 'image/png'
        });
    };
    {{#unless vrLocal}}
        document.querySelector('a-scene').addEventListener('renderstart', function(evt) {
            window.setTimeout(function() {
                const evt = new CustomEvent('uploadPreview');
                document.dispatchEvent(evt);
            }, 15000);
        });
    {{/unless}}

    document.addEventListener('uploadPreview', function() {
        const canvas = document.querySelector('a-scene').components.screenshot.getCanvas('equirectangular');
        canvas.toBlob(function(blob) {
            let formData = new FormData();

            formData.append("file", blob, 'preview.png');
            formData.append("path", window.location.pathname);
            formData.append("preview", "true");
            fetch("/api/media/create", {
                method: "POST",
                body: formData
            }).then((res) => {
                console.log('preview uploaded');
            });
        });




    });

    document.getElementById('media')
            .addEventListener('submit', function (event) {
        event.preventDefault();
        let formData = new FormData();
        if (!event.target.fileupload.files) {
            window.alert('select a file first');
            return;
        }
        formData.append("file", event.target.fileupload.files[0]);
        formData.append("path", window.location.pathname);
        formData.append("preview", "false");
        fetch(event.target.action, {
            method: "POST",
            body: formData
        }).then((res) => {
            if (res.status == 200) {
                window.alert('File added');
            }
        });

    }, false);

    document.addEventListener('click', (event) => {
        if (event.target.getAttribute('name') != "fileupload" &&
            event.target.getAttribute('type') != "submit") {
            event.preventDefault();
        }

        if (event.target.getAttribute('data-kind')) {
            document.dispatchEvent(
                    new CustomEvent('changeDevice',
                            {detail:
                                        {kind: event.target.getAttribute('data-kind'),
                                            id: event.target.getAttribute('data-id')}}));
            console.log(event.target);
        }
        switch(event.target.getAttribute('id')) {
            case 'joinButton':
                document.dispatchEvent(
                        new CustomEvent('connectSignalwire',
                                {detail: 'OK'}));
                document.getElementById('leaveButton').style.display = 'inline-block';
                document.getElementById('joinButton').style.display = 'none';
                document.getElementById('muteButton').style.display = 'inline-block';

                break;
            case 'leaveButton':
                document.dispatchEvent(
                        new CustomEvent('disconnectSignalwire',
                                {detail: 'OK'}));
                document.getElementById('leaveButton').style.display = 'none';
                document.getElementById('joinButton').style.display = 'inline-block';
                document.getElementById('muteButton').style.display = 'none';
                document.getElementById('unmuteButton').style.display = 'none';
                break;
            case 'muteButton':

                    document.dispatchEvent(
                            new CustomEvent('mute',
                                    {detail: 'OK'}));
                    document.getElementById('muteButton').style.display = 'none';
                    document.getElementById('unmuteButton').style.display = 'inline-block';

                break;
            case 'unmuteButton':
                document.dispatchEvent(
                        new CustomEvent('unmute',
                                {detail: 'OK'}));
                document.getElementById('muteButton').style.display = 'inline-block';
                document.getElementById('unmuteButton').style.display = 'none';
                break;
            case 'startScreenShareButton':
                document.dispatchEvent(
                        new CustomEvent('startScreenShare',
                                {detail: 'OK'}));

            case 'homeButton':
                window.location.href = (window.location.origin);

            case 'hideNonVR':
                document.querySelector('div.nonvr').classList.add('nonvrclosed');
                break;

            case 'showNonVR':
                document.querySelector('div.nonvr').classList.remove(['nonvrclosed']);
                break;


        }

    });
</script>
